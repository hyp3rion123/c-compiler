INT int
WAIN wain
LPAREN (
INT int
STAR *
ID begin
COMMA ,
INT int
ID size
RPAREN )
LBRACE {
INT int
STAR *
ID occs
BECOMES =
NULL NULL
SEMI ;
INT int
ID i
BECOMES =
NUM 0
SEMI ;
INT int
ID j
BECOMES =
NUM 0
SEMI ;
INT int
ID max
BECOMES =
NUM 0
SEMI ;
INT int
ID smallestAbsValue
BECOMES =
NUM 250
SEMI ;
INT int
ID absValue
BECOMES =
NUM 0
SEMI ;
INT int
ID smallestAbsValueIdx
BECOMES =
NUM 0
SEMI ;
INT int
ID tieCount
BECOMES =
NUM 0
SEMI ;
INT int
ID maxIndecesSize
BECOMES =
NUM 0
SEMI ;
INT int
STAR *
ID maxIndeces
BECOMES =
NULL NULL
SEMI ;
INT int
ID toReturn
BECOMES =
NUM 0
SEMI ;
ID occs
BECOMES =
NEW new
INT int
LBRACK [
NUM 483
RBRACK ]
SEMI ;
ID maxIndeces
BECOMES =
NEW new
INT int
LBRACK [
NUM 483
RBRACK ]
SEMI ;
WHILE while
LPAREN (
ID i
LT <
ID size
RPAREN )
LBRACE {
STAR *
LPAREN (
ID occs
PLUS +
ID i
RPAREN )
BECOMES =
NUM 0
SEMI ;
ID i
BECOMES =
ID i
PLUS +
NUM 1
SEMI ;
RBRACE }
ID i
BECOMES =
NUM 0
SEMI ;
WHILE while
LPAREN (
ID i
LT <
ID size
RPAREN )
LBRACE {
STAR *
LPAREN (
ID occs
PLUS +
STAR *
LPAREN (
ID begin
PLUS +
ID i
RPAREN )
PLUS +
NUM 241
RPAREN )
BECOMES =
STAR *
LPAREN (
ID occs
PLUS +
STAR *
LPAREN (
ID begin
PLUS +
ID i
RPAREN )
PLUS +
NUM 241
RPAREN )
PLUS +
NUM 1
SEMI ;
IF if
LPAREN (
STAR *
LPAREN (
ID occs
PLUS +
STAR *
LPAREN (
ID begin
PLUS +
ID i
RPAREN )
PLUS +
NUM 241
RPAREN )
GT >
ID max
RPAREN )
LBRACE {
ID max
BECOMES =
STAR *
LPAREN (
ID occs
PLUS +
STAR *
LPAREN (
ID begin
PLUS +
ID i
RPAREN )
PLUS +
NUM 241
RPAREN )
SEMI ;
RBRACE }
ELSE else
LBRACE {
RBRACE }
ID i
BECOMES =
ID i
PLUS +
NUM 1
SEMI ;
RBRACE }
ID i
BECOMES =
NUM 0
SEMI ;
WHILE while
LPAREN (
ID i
LT <
ID size
RPAREN )
LBRACE {
IF if
LPAREN (
STAR *
LPAREN (
ID occs
PLUS +
ID i
RPAREN )
EQ ==
ID max
RPAREN )
LBRACE {
STAR *
LPAREN (
ID maxIndeces
PLUS +
ID j
RPAREN )
BECOMES =
ID i
SEMI ;
ID j
BECOMES =
ID j
PLUS +
NUM 1
SEMI ;
ID maxIndecesSize
BECOMES =
ID maxIndecesSize
PLUS +
NUM 1
SEMI ;
RBRACE }
ELSE else
LBRACE {
RBRACE }
ID i
BECOMES =
ID i
PLUS +
NUM 1
SEMI ;
RBRACE }
ID i
BECOMES =
NUM 0
SEMI ;
IF if
LPAREN (
ID maxIndecesSize
EQ ==
NUM 1
RPAREN )
LBRACE {
ID toReturn
BECOMES =
STAR *
LPAREN (
ID maxIndeces
RPAREN )
SEMI ;
RBRACE }
ELSE else
LBRACE {
WHILE while
LPAREN (
ID i
LT <
ID maxIndecesSize
RPAREN )
LBRACE {
IF if
LPAREN (
STAR *
LPAREN (
ID maxIndeces
PLUS +
ID i
RPAREN )
LE <=
NUM 241
RPAREN )
LBRACE {
ID absValue
BECOMES =
NUM 241
MINUS -
STAR *
LPAREN (
ID maxIndeces
PLUS +
ID i
RPAREN )
SEMI ;
RBRACE }
ELSE else
LBRACE {
ID absValue
BECOMES =
STAR *
LPAREN (
ID maxIndeces
PLUS +
ID i
RPAREN )
MINUS -
NUM 241
SEMI ;
RBRACE }
IF if
LPAREN (
ID absValue
EQ ==
ID smallestAbsValue
RPAREN )
LBRACE {
ID tieCount
BECOMES =
ID tieCount
PLUS +
NUM 1
SEMI ;
RBRACE }
ELSE else
LBRACE {
RBRACE }
IF if
LPAREN (
ID absValue
LT <
ID smallestAbsValue
RPAREN )
LBRACE {
ID smallestAbsValue
BECOMES =
ID absValue
SEMI ;
ID smallestAbsValueIdx
BECOMES =
ID i
SEMI ;
ID tieCount
BECOMES =
NUM 0
SEMI ;
RBRACE }
ELSE else
LBRACE {
RBRACE }
ID i
BECOMES =
ID i
PLUS +
NUM 1
SEMI ;
RBRACE }
IF if
LPAREN (
ID tieCount
EQ ==
NUM 0
RPAREN )
LBRACE {
ID toReturn
BECOMES =
STAR *
LPAREN (
ID maxIndeces
PLUS +
ID smallestAbsValueIdx
RPAREN )
SEMI ;
RBRACE }
ELSE else
LBRACE {
ID toReturn
BECOMES =
NUM 0
MINUS -
ID smallestAbsValue
SEMI ;
RBRACE }
RBRACE }
DELETE delete
LBRACK [
RBRACK ]
ID occs
SEMI ;
DELETE delete
LBRACK [
RBRACK ]
ID maxIndeces
SEMI ;
RETURN return
ID toReturn
SEMI ;
RBRACE }
